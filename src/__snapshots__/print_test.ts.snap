export const snapshot = {};

snapshot[`print a basic program 1`] = `
\`(include-book "projects/apply/top" :dir :system)
(defun\$ cogito-reduce (xs fn init)
  (declare (xargs :guard (and (true-listp xs) (true-listp fn) (equal (len (cadr fn)) 2))))
  (if (endp xs)
    init
    (apply\$ fn (list (first xs) (cogito-reduce (rest xs) fn init)))))
(include-book "std/util/defaggregate" :dir :system)

(include-book "arithmetic-5/top" :dir :system)

(defun foo (x)
  (declare (xargs :guard (rationalp x) ))
  (if (not (rationalp x))
    (mv nil nil nil)
    (if (equal x 0)
    (let ((x (cogito-reduce (list 1 2 3) (lambda\$ (x y)
  (declare (xargs :guard (and (rationalp x) (rationalp y)))) (+ x (* y 2))) 0)))
x)
    
    (if (equal x 1)
    (let ((y (append (list 1) (list (expt 2 3)) (list 3) y))) nil)
    (mv 1 2 3)
    (assoc 'y x)))))

(defthm |foo works|
    (implies (rationalp x)
        (> (foo x) 0)))

(defconst *foo* 1)

(std::defaggregate foo
  ((x (rational-listp x)) (y (rationalp y))))

(assert\$ (implies (> 3 2) (and t nil))
(prog2\$ (cw "hi~%" (equal (+ (+ t nil) nil) 3))
(mv-let (x y) (foo 1)
(prog2\$ (cw "hello, ~x0!~%" "world") nil))))\`
`;

snapshot[`works with struct types 1`] = `
\`(include-book "std/util/defaggregate" :dir :system)

(std::defaggregate point
  ((x (rationalp x)) (y (rationalp y))))

(defun foo (p)
  (declare (xargs :guard (point-p p) ))
  (if (not (point-p p))
    nil
    (+ (assoc 'x p) (assoc 'y p))))\`
`;

snapshot[`works with switch 1`] = `
'

(defun foo (x)
  (declare (xargs :guard (rationalp x) ))
  (if (not (rationalp x))
    nil
    (cond ((equal x 1) "a")
((equal x 2) "b") (t "c"))))'
`;

snapshot[`returns appropriate tuples 1`] = `
"

(defun foo (x)
  (declare (xargs :guard (rationalp x) ))
  (if (not (rationalp x))
    (mv nil nil)
    (mv x (+ x 1))))"
`;
