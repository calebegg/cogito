@top Program { declaration* }

declaration {
  function | theorem | struct
}

function { 
  @specialize<identifier, 'function'> identifier '(' paramList ')' '{' statement* '}'
}

theorem {
  @specialize<identifier, 'theorem'> identifier '(' paramList ')' '{' statement* '}'
}

struct {
  @specialize<identifier, 'struct'> identifier paramList
}

keyword {
  @specialize<identifier, 'struct'>
  | @specialize<identifier, 'theorem'>
  | @specialize<identifier, 'function'>
  | @specialize<identifier, 'mutual'>
}

paramList {
   ( identifier ':' type ( ',' identifier ':' type )* ','? )?
}

type {
  identifier ( '<' type ( ',' type )* ','? '>' )?
}

statement {
  ( assignment | expression ) ';'
}

assignment {
  identifier '=' expression
}

@precedence {
  star @left,
  slash @left,
  plus @left,
  minus @left,
  equals @left,
  dot @left,
  starStar @right
}

expression {
  identifier '(' expression ( ',' expression )* ','? ')'
  | number
  | '(' expression ')'
  | expression !plus '+' expression
  | expression !minus '-' expression
  | expression !star '*' expression
  | expression !slash '/' expression
  | expression !equals '==' expression
  | expression !dot '.' expression
  | expression !starStar '**' expression
}

@skip { space | Comment }

@tokens {
  identifier { @asciiLetter+ }
  number { @digit+ }
  space { @whitespace+ }
  Comment { "//" ![\n]* }
  @precedence { Comment, '/' }
}